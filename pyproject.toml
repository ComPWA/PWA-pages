[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools"]

[project]
authors = [{name = "Common Partial Wave Analysis", email = "compwa-admin@ep1.rub.de"}]
classifiers = ["Programming Language :: Python :: 3.13"]
dependencies = [
    "PyGithub",
    "PyYAML",
    "attrs",
    "pydantic >=2",
    "pytablewriter[html]",
    "python-dateutil",
    "python-gitlab",
]
description = "A central knowledge-base for Partial Wave Analysis"
keywords = [
    "HEP",
    "PWA",
    "amplitude analysis",
    "partial wave analysis",
    "particle physics",
    "particles",
    "physics",
]
license = {file = "LICENSE"}
maintainers = [{email = "compwa-admin@ep1.rub.de"}]
name = "pwa-pages"
requires-python = "~=3.13.0"
version = "0.0.0"

[project.readme]
content-type = "text/markdown"
file = "README.md"

[project.scripts]
export-json-schema = "pwa_pages.project_inventory:export_json_schema"

[project.urls]
Changelog = "https://github.com/ComPWA/PWA-pages/releases"
Documentation = "https://pwa.rtfd.io"
Source = "https://github.com/ComPWA/PWA-pages"
Tracker = "https://github.com/ComPWA/PWA-pages/issues"

[dependency-groups]
dev = [
    "poethepoet",
    "ruff",
    {include-group = "doc"},
    {include-group = "style"},
    {include-group = "test"},
]
doc = [
    "jupyter-cache",
    "quarto-cli",
    {include-group = "notebooks"},
]
notebooks = [
    "feynman",
    "matplotlib",
    "sympy",
]
style = [
    "mypy",
    {include-group = "types"},
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-xdist",
]
types = [
    "pytest",
    "types-PyYAML",
    "types-python-dateutil",
]

[tool.setuptools]
include-package-data = false
package-dir = {"" = "src"}

[tool.setuptools.package-data]
pwa_pages = ["py.typed"]

[tool.setuptools.packages.find]
namespaces = false
where = ["src"]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
]

[tool.coverage.run]
branch = true
omit = [
    "benchmarks/**/*.py",
    "docs/**/*.ipynb",
    "docs/**/*.py",
    "examples/**/*.py",
    "tests/**/*.py",
]
source = ["src"]

[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_defs = true
exclude = "_build"
show_error_codes = true
warn_unused_configs = true

[[tool.mypy.overrides]]
check_untyped_defs = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
module = ["tests.*"]

[tool.poe]
executor.type = "uv"

[tool.poe.tasks.all]
help = "Run all continuous integration (CI) tasks locally"
ignore_fail = "return_non_zero"
sequence = [
    "cov",
    "doc",
    "linkcheck",
    "style",
    "test-all",
]

[tool.poe.tasks.cov]
cmd = """
pytest \
    --cov=pwa_pages \
    --cov-fail-under=90 \
    --cov-report=html \
    --cov-report=xml \
    --numprocesses=auto \
    ${paths}
"""
help = "Compute how much of the source code is covered by tests"

[[tool.poe.tasks.cov.args]]
default = "src tests"
multiple = true
name = "paths"
positional = true

[tool.poe.tasks.doc]
cmd = "quarto render docs --no-clean"
help = "Build documentation and API"

[tool.poe.tasks.doclive]
cmd = "quarto preview docs --no-clean"
help = "Set up a server to directly preview changes to the HTML pages"

[tool.poe.tasks.linkcheck]
cmd = """
python -c 'print("Not yet implemented, see https://github.com/quarto-dev/quarto-cli/issues/1319")',
"""
help = "Check external links in the documentation (requires internet connection)"

[tool.poe.tasks.style]
cmd = "pre-commit run --all-files"
help = "Perform all linting, formatting, and spelling checks"

[tool.poe.tasks.test]
cmd = "pytest --numprocesses=auto ${paths}"
help = "Run all unit tests"

[[tool.poe.tasks.test.args]]
default = "src tests"
multiple = true
name = "paths"
positional = true

[tool.poe.tasks.test-all]
cmd = """
uv run \
    --group=test \
    --isolated \
    --no-dev \
    pytest \
        -m 'slow or not slow' \
        --numprocesses=auto
"""
help = "Run all tests"

[tool.pyright]
include = [
    "docs",
    "src",
]
reportCallIssue = false
reportGeneralTypeIssues = false
reportIncompatibleMethodOverride = false
reportMissingParameterType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportOverlappingOverload = false
reportPrivateImportUsage = false
reportPrivateUsage = false
reportUnboundVariable = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryComparison = false
reportUnnecessaryContains = false
reportUnnecessaryIsInstance = false
reportUntypedFunctionDecorator = false
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedImport = true
reportUnusedVariable = true
typeCheckingMode = "strict"
venv = ".venv"
venvPath = "."

[tool.pytest.ini_options]
addopts = [
    "--color=yes",
    "--doctest-continue-on-failure",
    "--doctest-modules",
    "--durations=3",
    "--ignore=docs/conf.py",
]
filterwarnings = [
    "error",
    "ignore:Argument login_or_token is deprecated.*:DeprecationWarning",
    "ignore:Exception ignored in.*:UserWarning",
    "ignore:There is no current event loop:DeprecationWarning",
]
testpaths = [
    "src",
    "tests",
]

[tool.ruff]
preview = true
show-fixes = true
src = [
    "src",
    "tests",
]

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore = [
    "ANN401",
    "COM812",
    "CPY001",
    "D101",
    "D102",
    "D103",
    "D105",
    "D107",
    "D203",
    "D213",
    "D407",
    "D416",
    "DOC",
    "E501",
    "FURB101",
    "FURB103",
    "FURB140",
    "G004",
    "ISC001",
    "PLW1514",
    "PT001",
    "PTH",
    "SIM108",
]
select = ["ALL"]
task-tags = ["cspell"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["display"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"docs/*" = [
    "INP001",
    "S101",
    "S113",
]
"src/pwa_pages/project_inventory.py" = [
    "FA100",
    "UP00",
]
"tests/*" = [
    "ANN",
    "D",
    "FBT001",
    "INP001",
    "PGH001",
    "PLC2701",
    "PLR0913",
    "PLR2004",
    "PLR6301",
    "S101",
    "SLF001",
    "T20",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.tomlsort]
all = false
ignore_case = true
in_place = true
sort_first = [
    "build-system",
    "project",
    "tool.setuptools",
]
spaces_indent_inline_array = 4
trailing_comma_inline_array = true
